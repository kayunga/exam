package GE_HH.examTimetablingProblem.ProblemDomain;

import GE_HH.examTimetablingProblem.Utilities.UtilityFunctions;
import GE_HH.examTimetablingProblem.components.Exam;
import GE_HH.examTimetablingProblem.components.Period;
import GE_HH.examTimetablingProblem.components.Room;

import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;


public class SoftConstraints {

    private UtilityFunctions df = new UtilityFunctions();

     /**
     * Calculate the number of soft constraint violations generated by the system. This function will be used in calculating the fitness function of individuals
     */
    public int calculateConstraintViolations(List<ExamPlacement> examPlacement) {

        //Costs for all the hard constraint violations
        int softConstraintsViolationCost;
        int tempCost1=0;
        int tempCost2=0;
        int tempCost3;
        int tempCost4;
        int tempCost5;
        int tempCost6;
        int tempCost7;

        int twoInaRowPenalty=df.getTwoInARow();
        int twoInADayPenalty=df.getTwoInADay();


        Exam tempExam, tempExam2;
        Period tempPeriod;


                for (ExamPlacement examA : examPlacement)
          {

                  // Two Exams in a Row Constraint
                  tempExam=getNextExamByPeriod(examPlacement,examA.getPeriod());

                 int count =getDf().getNumStudentTakingBothExams(tempExam.getiStudents(),examA.getExam().getiStudents());


                    if ((!getDf().containsSameStudents(examA.getExam().getiStudents(),tempExam.getiStudents())) && examA.getPeriod().getpDay().equals(examA.getPeriod().getNextPeriod().getpDay()) && examA.getExam()!=tempExam)
                    {
                      //  System.out.println("vehicle A: "+examA.getExam().getName()+" vehicle B: "+tempExam.getName());
                      //  System.out.println(count+ " common students exists between "+examA.getExam().getName()+" And "+tempExam.getName());

                         tempCost1+=twoInaRowPenalty*count;

                    }


              // Two Exams in a Day Constraint
                  tempPeriod=examA.getPeriod().getNextPeriod();
                   if(tempPeriod!=null) {
                       tempExam2 = getNextExamByPeriod(examPlacement, examA.getPeriod().getNextPeriod());
                       int count2 =getDf().getNumStudentTakingBothExams(tempExam2.getiStudents(),examA.getExam().getiStudents());

                       if ((!getDf().containsSameStudents(examA.getExam().getiStudents(),tempExam2.getiStudents())) && examA.getPeriod().getpDay().equals(examA.getPeriod().getNextPeriod().getNextPeriod().getpDay()) && examA.getExam()!=tempExam2)
                       {
                         //  System.out.println("vehicle A: "+examA.getExam().getName()+" vehicle B: "+tempExam2.getName());
                         //  System.out.println(count2+ " common students exists between "+examA.getExam().getName()+" And "+tempExam2.getName());

                           tempCost2+=twoInADayPenalty*count2;

                       }

                   }


              }

          //Period Spread Constraint
         tempCost3=getAllPeriodsBySpread(examPlacement,getDf().getPeriodSpread());

        //Mixed Duration Penalty
        tempCost4=getMixedDurationPenalty(examPlacement,getDf().getNonMixedDurations());

        //Biggest exams scheduled first
        tempCost5=getLargerExamsAtBeginning(examPlacement,getDf().getFrontLoad());

        //Room penalty
        tempCost6=getRoomPenalty(examPlacement);

        //Period penalty
        tempCost7=getPeriodPenalty(examPlacement);

        softConstraintsViolationCost=tempCost1+tempCost2+tempCost3+tempCost4+tempCost5+tempCost6+tempCost7;

        return softConstraintsViolationCost;
    }


    //get Next exam placement given period
    public Exam getNextExamByPeriod(List<ExamPlacement> examPlacement,Period p) {

        Exam nextExam = new Exam(0000,0000);
        Period tempPeriod=new Period(00000,"none","none",0,0);

        for (int i=0; i<examPlacement.size();i++)
        {
            tempPeriod=p.getNextPeriod();

            if(tempPeriod==null)
            {
                break;
            }
            else
                {

                if ( examPlacement.get(i).getPeriod().equals(tempPeriod)) {
                    nextExam = examPlacement.get(i).getExam();
                }


            }
        }
        return  nextExam;
    }

    //get next Exams by period
    public List<Exam> getNextExamsByPeriod(List<ExamPlacement> examPlacement,Period p) {

        List<Exam> nextExam = new ArrayList<>();
        Period tempPeriod=new Period(00000,"none","none",0,0);

        for (int i=0; i<examPlacement.size();i++)
        {
            tempPeriod=p.getNextPeriod();

            if(tempPeriod==null)
            {
                break;
            }
            else
            {

                if ( examPlacement.get(i).getPeriod().equals(tempPeriod)) {
                    nextExam.add(examPlacement.get(i).getExam());
                }


            }
        }
        return  nextExam;
    }

    //get list of Exams by Room penalty
    public List<Exam> getExamsByRoomPenalty(List<ExamPlacement> examPlacement,int rPenalty) {

        List<Exam> nextExam = new ArrayList<>();

        for (int i=0; i<examPlacement.size();i++)
        {
            if ( examPlacement.get(i).getRoom().getrPenalty()==rPenalty) {
                    nextExam.add(examPlacement.get(i).getExam());
               }

        }
        return  nextExam;
    }



    public UtilityFunctions getDf() {
        return df;
    }

    public void setDf(UtilityFunctions df) {
        this.df = df;
    }

   // get all periods within the given period Spread
    public int getAllPeriodsBySpread(List<ExamPlacement> examPlacement, int spread)
    {
        int NumStudents=0;
        int[] totalPenalty = new int[examPlacement.size()];
        int finalPenalty=0;

        for (int i=0; i<examPlacement.size();i++)
        {
                  for (Period p = examPlacement.get(i).getPeriod().getNextPeriod(); p != null && p.getIndex() - examPlacement.get(i).getPeriod().getIndex() <= spread; p = p.getNextPeriod())
            {
                List<Exam> nextExam =getNextExamsByPeriod(examPlacement,p.getPrevPeriod());
                for(int j=0;j<nextExam.size();j++) {
                    if (!examPlacement.get(i).getExam().getName().equals(nextExam.get(j).getName())) {
                        NumStudents = getDf().getNumStudentTakingBothExams(examPlacement.get(i).getExam().getiStudents(), nextExam.get(j).getiStudents());
                //        System.out.println("vehicle :" + examPlacement.get(i).getExam().getName() + " And Next vehicle :" + nextExam.get(j).getName() + " # Students:" + NumStudents);
                        totalPenalty[i] += NumStudents;
                    }
                }

            }

            finalPenalty+=totalPenalty[i];
      //      System.out.println("Total Penalty : "+examPlacement.get(i).getExam().getName()+" :"+totalPenalty[i]);
          //  System.out.println();
        }

             return finalPenalty;
    }

    //get mixed duration Penalty
    public int getMixedDurationPenalty(List<ExamPlacement> examPlacement, int penalty)
    {
        int totalPenalty=0;
        List<List<Exam>> mdList = new ArrayList<>();
        List<Exam> tmd= new ArrayList<>();
        HashSet MixedDurationsSet = new HashSet();

        for(int n=0;n<getDf().getPeriods().size();n++) {
         //   System.out.print("Period :" + getDf().getPeriods().get(n).getName() + " Exams :");
            for (int e = 0; e < examPlacement.size(); e++) {

                if (getDf().getPeriods().get(n) == examPlacement.get(e).getPeriod()) {


                    tmd.add(examPlacement.get(e).getExam());

                    //   System.out.print(tmd.get(e).getName()+" Duration :" +tmd.get(e).getLength()+"  ");
                    MixedDurationsSet.add(examPlacement.get(e).getExam().getLength());


                }

            }
            mdList.add(n, tmd);

            for (int k = 0; k < tmd.size(); k++) {

          //      System.out.print("[ "+mdList.get(n).get(k).getName()+ ","+mdList.get(n).get(k).getLength()+" ], ");
            }

            if(MixedDurationsSet.size() >0)
            {
                int tempPenalty = (MixedDurationsSet.size() - 1) * penalty;
            //    System.out.print(" Distinct Durations: " + MixedDurationsSet.size() + ", Penalty :" + tempPenalty);
                totalPenalty += tempPenalty;
            }
            else
            {

                int tempPenalty = 0;
           //     System.out.print(" Distinct Durations: " + MixedDurationsSet.size() + " Penalty :" + tempPenalty);
                totalPenalty += tempPenalty;
            }

          //  System.out.println();


            tmd.clear();
            MixedDurationsSet.clear();

        }
        return totalPenalty;

    }
    //Larger Exams towards the beginning of the examination session
    public int getLargerExamsAtBeginning(List<ExamPlacement> examPlacement, Integer[] frontload)
    {
        int totalPenalty=0;
        int weighting=frontload[2];
        List<Exam> tempExamList = getDf().getExamsBySize().subList(0, frontload[0]);

        List<Period> tempPeriod=  getDf().getPeriods().subList(Math.max(getDf().getPeriods().size() - frontload[1], 0), getDf().getPeriods().size());

    //    System.out.println("Exams :"+ Arrays.toString(tempExamList.toArray()));
    //    System.out.println("Periods :"+ Arrays.toString(tempPeriod.toArray()));

        for (int e = 0; e < examPlacement.size(); e++) {

            if(tempExamList.equals(examPlacement.get(e).getExam()) && tempPeriod.equals(examPlacement.get(e).getPeriod()))
            {
                totalPenalty+=weighting;

           //     System.out.println("vehicle :"+examPlacement.get(e).getExam().getName()+" Period :"+examPlacement.get(e).getPeriod().getName());

            }
        }

        return totalPenalty;

    }

    //get Room Penalty
    public int getRoomPenalty(List<ExamPlacement> examPlacement)
    {
        int totalPenalty=0;
        int tempPenalty=0;
        int countExams;
        List<List<Exam>> mdList = new ArrayList<>();
        List<List<Room>> rmList = new ArrayList<>();
        List<Exam> tmd= new ArrayList<>();
        List<Room> room= new ArrayList<>();


        for(int n=0;n<getDf().getPeriods().size();n++)
        {
            //  System.out.print("Period :" + getDf().getPeriods().get(n).getName() + " Exams :");

              for (int e = 0; e < examPlacement.size(); e++) {

                if (getDf().getPeriods().get(n) == examPlacement.get(e).getPeriod()) {


                    tmd.add(examPlacement.get(e).getExam());
                    room.add(examPlacement.get(e).getRoom());
                                  }

            }
            mdList.add(n, tmd);
            rmList.add(n, room);

            for (int k = 0; k < tmd.size(); k++) {


                if(rmList.get(n).get(k).getrPenalty()!=0)
                {
                    countExams=1;
                    tempPenalty+=countExams*rmList.get(n).get(k).getrPenalty();

                }

             //   System.out.print("["+mdList.get(n).get(k).getName()+ ","+rmList.get(n).get(k).getName()+"] ");
            }


          //  System.out.print(" Penalty :" + tempPenalty);
            totalPenalty += tempPenalty;



           //  System.out.println();


            tmd.clear();
            room.clear();
            countExams=0;
            tempPenalty=0;


        }
        return totalPenalty;

    }

    //get Period Penalty
    public int getPeriodPenalty(List<ExamPlacement> examPlacement)
    {
        int totalPenalty=0;
        int tempPenalty=0;
        int countExams;
        List<List<Exam>> mdList = new ArrayList<>();
        List<List<Period>> pList = new ArrayList<>();
        List<Exam> tmd= new ArrayList<>();
        List<Period> period= new ArrayList<>();


        for(int n=0;n<getDf().getPeriods().size();n++)
        {
          //  System.out.print("Period :" + getDf().getPeriods().get(n).getName() + " Exams :");

            for (int e = 0; e < examPlacement.size(); e++) {

                if (getDf().getPeriods().get(n) == examPlacement.get(e).getPeriod()) {


                    tmd.add(examPlacement.get(e).getExam());
                    period.add(examPlacement.get(e).getPeriod());
                }

            }
            mdList.add(n, tmd);
            pList.add(n, period);

            for (int k = 0; k < tmd.size(); k++) {


                if(pList.get(n).get(k).getpWeight()!=0)
                {
                    countExams=1;
                    tempPenalty+=countExams*pList.get(n).get(k).getpWeight();

                }

              //  System.out.print("["+mdList.get(n).get(k).getName()+ ","+pList.get(n).get(k).getIndex()+"] ");
            }


          //  System.out.print(" Penalty :" + tempPenalty);
            totalPenalty += tempPenalty;



        //    System.out.println();


            tmd.clear();
            period.clear();
            countExams=0;
            tempPenalty=0;


        }
        return totalPenalty;

    }


}
