package GE_HH.examTimetablingProblem.ProblemDomain;

import GE_HH.examTimetablingProblem.Utilities.UtilityFunctions;
import GE_HH.examTimetablingProblem.components.Exam;
import GE_HH.examTimetablingProblem.components.Period;

import java.util.ArrayList;
import java.util.List;


public class HardConstraints {

    private UtilityFunctions df = new UtilityFunctions();


     /**
     * Calculate the number of hard constraint violations generated by the system. This function will be used in calculating the fitness function of individuals
     */
    public int calculateConstraintViolations(List<ExamPlacement> examPlacement) {

        //Costs for all the hard constraint violations
        int hardConstraintsViolationCost = 0;
        int count=0;
        int tempCost0=0;
        int tempCost1=0;
        int tempCost2=0;
        int tempCost3=0;
        int tempCost4=0;
        int tempCost5=0;
        int tempCost6=0;

        //
        List<Integer> examIds;
        List<Integer> examIds2;
        List<PeriodConstraints> pc1 =new ArrayList<>();
        List<PeriodConstraints> pc2 =new ArrayList<>();

                for (ExamPlacement examA : examPlacement)
          {

              //  exam size Hard HardConstraints
              int periodDuration = examA.getPeriod().getpLength();
              int examDuration = examA.getExam().getLength();
              if (periodDuration < examDuration) {
                  // System.out.println("exam Duration Violation: " + examA.examA.getPeriod().getName() + " smaller than size of " + examA.getExam().getName());
                  tempCost0++;
              }


            //  Room Capacity Hard HardConstraints
            int roomCapacity = examA.getRoom().getCapacity();
            int examSize = examA.getExam().getNumStudents();
            if (roomCapacity < examSize) {
               // System.out.println("Room Capacity Violation: " + examA.getRoom().getName() + " smaller than size of " + examA.getExam().getName());
                tempCost1++;
                              }


             // No student sits for more than two exams at a time
            for (ExamPlacement examB : examPlacement)
            {
                if (examA.getPeriod() == examB.getPeriod() && (getDf().getNumStudentTakingBothExams(examA.getExam().getiStudents(), examB.getExam().getiStudents())!=0)
                        && examA.getExam() != examB.getExam())
                {
                    count++;
                }
                    tempCost2= count/2;
            }


            // Period Related After Hard constraints
             for(int i=0; i<getDf().getPeriodConstraintsByType("AFTER").size();i++)
             {

                 if(examA.getExam().getId()==getDf().getPeriodConstraintsByType("AFTER").get(i).getA())
                 {
                     PeriodConstraints ps = getDf().getPeriodConstraintsByExamAndType(examA.getExam().getId(),"AFTER");
                //     System.out.println("Constraint ("+i+"): " + ps.getName());
                     Exam tempExam=getAfterExamByPeriod(examPlacement,examA.getPeriod());
                 //    System.out.println(" Current vehicle ("+i+"): " + tempExam.getName()+" Next vehicle: "+examA.getExam().getName()+" Next vehicle Period:"+examA.getPeriod().getName());

                     if(ps.getB()< tempExam.getId())
                     {
                     //    System.out.println("Period Violation : " + ps.getName());
                          tempCost3++;
                     }


                 }
             }


            // Period Related vehicle Coincidence Hard constraints
            for(int i=0; i<getDf().getPeriodConstraintsByType("EXAM_COINCIDENCE").size();i++)
            {

                if(examA.getExam().getId()==getDf().getPeriodConstraintsByType("EXAM_COINCIDENCE").get(i).getA())
                {
                   pc1.add((getDf().getPeriodConstraintsListByExamAndType(getDf().getPeriodConstraintsByType("EXAM_COINCIDENCE"),examA.getExam().getId(), "EXAM_COINCIDENCE").get(i)));
                 //  System.out.println("Constraint (" + i + "): " + ps.get(i).getName());
                    examIds = getExamCoincidenceByPeriod(examPlacement, examA.getPeriod());
                    //    System.out.println(" Current vehicle ("+i+"): " + tempExam.getName()+" Next vehicle: "+examA.getExam().getName()+" Next vehicle Period:"+examA.getPeriod().getName());

                    for(int p=0;p<pc1.size();p++)
                    {
                        if (!examIds.contains(pc1.get(p).getB())) {
                            //  System.out.println("Period Violation : " + pc1.get(i).getName());
                            tempCost4++;
                        }

                    }


                }

            }


               // Period Related vehicle Exclusion Hard constraints

            for (int i = 0; i < getDf().getPeriodConstraintsByType("EXCLUSION").size(); i++)
            {
                 if (examA.getExam().getId() == getDf().getPeriodConstraintsByType("EXCLUSION").get(i).getA())
                 {
                    pc2.add(getDf().getPeriodConstraintsListByExamAndType(getDf().getPeriodConstraintsByType("EXCLUSION"),examA.getExam().getId(), "EXCLUSION").get(i));
                  //  System.out.println("Constraint (" + i + "): " + ps.get(i).getName());
                    examIds2 = getExamCoincidenceByPeriod(examPlacement, examA.getPeriod());
                    //    System.out.println(" Current vehicle ("+i+"): " + tempExam.getName()+" Next vehicle: "+examA.getExam().getName()+" Next vehicle Period:"+examA.getPeriod().getName());


                     for(int p=0;p<pc2.size();p++)
                     {
                         if (examIds2.contains(pc2.get(p).getB())) {
                             //  System.out.println("Period Violation : " + pc1.get(i).getName());
                             tempCost5++;
                         }

                     }



                 }

            }


            //Room related hard Constraints
              for (ExamPlacement examB : examPlacement) {

                  for (int i = 0; i < getDf().getRoomConstraints().size(); i++)
                  {

                    //  System.out.println("Constraint (" + i + "): " + getDf().getRoomConstraints().get(i).getName());
                      if (examA.getExam().getId() == getDf().getRoomConstraints().get(i).getA())
                      {
                          if((examA.getPeriod().getIndex()==examB.getPeriod().getIndex()) && (examA.getExam()!=examB.getExam()))
                          {

                            //  System.out.println("\nRoom Violation : " + getDf().getRoomConstraints().get(i).getName());
                              tempCost6++;

                          }
                      }
                  }
              }



          }


        hardConstraintsViolationCost=tempCost0+tempCost1+tempCost2+tempCost3+tempCost4+tempCost5+tempCost6;
     //   softConstraintsViolationCost=sConstraints.calculateConstraintViolations(examPlacement);


        return hardConstraintsViolationCost;
    }


    //get After exam placement given period
    public Exam getAfterExamByPeriod(List<ExamPlacement> examPlacement,Period p) {

        Exam nextsExam = new Exam(0000,0000);
        Period tempsPeriod=new Period(00000,"none","none",0,0);

        for (int i=0; i<examPlacement.size();i++)
        {
               tempsPeriod=p.getNextPeriod();

                 if(tempsPeriod==null)
                 {
                     break;
                 }
                 else {

                     if ( examPlacement.get(i).getPeriod().equals(tempsPeriod)) {
                         nextsExam = examPlacement.get(i).getExam();
                     }


                 }
        }
          return  nextsExam;
    }

    //get exam Coincidence placement given period id
    public  List<Integer> getExamCoincidenceByPeriod(List<ExamPlacement> examPlacement,Period p) {

        ArrayList<Integer> examIds=new ArrayList<>();

        for (int i=0; i<examPlacement.size();i++)
        {
                if ( examPlacement.get(i).getPeriod().getIndex()==p.getIndex()) {
                    examIds.add(examPlacement.get(i).getExam().getId());
                }

        }
        return  examIds;
    }






    public UtilityFunctions getDf() {
        return df;
    }

    public void setDf(UtilityFunctions df) {
        this.df = df;
    }
}
